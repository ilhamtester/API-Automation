{
  "stats": {
    "suites": 7,
    "tests": 7,
    "passes": 7,
    "pending": 0,
    "failures": 0,
    "start": "2025-02-13T07:12:05.538Z",
    "end": "2025-02-13T07:12:08.615Z",
    "duration": 3077,
    "testsRegistered": 7,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "eb18a634-a468-4da9-abd2-f63723c624cf",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "91955d9c-94ed-4f31-b6cb-07af3f602f04",
          "title": "Validation JSON Schema",
          "fullFile": "C:\\Users\\ilham\\OneDrive\\Desktop\\API Automation\\test\\booking\\deleteBooking.js",
          "file": "\\test\\booking\\deleteBooking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "DELETE JSON Schema",
              "fullTitle": "Validation JSON Schema DELETE JSON Schema",
              "timedOut": false,
              "duration": 797,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst response = await fetch('https://reqres.in/api/users/2', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n// Check if the response body is empty\nconst text = await response.text();\nif (text) {\n    const data = JSON.parse(text);\n    const validate = ajv.compile(deleteSchema);\n    const valid = validate(data);\n    if (!valid) {\n        console.log(validate.errors);\n    }\n    console.log(\"test: \" + JSON.stringify(data, null, 1));\n    assert.ok(valid, \"Response JSON harus sesuai dengan schema\");\n} else {\n    console.log(\"No content in response body\");\n}",
              "err": {},
              "uuid": "cb5fba1c-1ab1-4f4c-8e0e-6c0628871b79",
              "parentUUID": "91955d9c-94ed-4f31-b6cb-07af3f602f04",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "cb5fba1c-1ab1-4f4c-8e0e-6c0628871b79"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 797,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e7fb3e2d-6844-42af-a4c3-b5e61e743828",
          "title": "Network Response Status",
          "fullFile": "C:\\Users\\ilham\\OneDrive\\Desktop\\API Automation\\test\\booking\\deleteBooking.js",
          "file": "\\test\\booking\\deleteBooking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "DELETE should return status 204",
              "fullTitle": "Network Response Status DELETE should return status 204",
              "timedOut": false,
              "duration": 497,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst response = await fetch('https://reqres.in/api/users/2', {\n    method: 'DELETE',\n    headers: {\n        'Content-Type': 'application/json'\n    }\n});\n// Assert that the response status is 204\nassert.strictEqual(response.status, 204, \"Response status harus 204\");",
              "err": {},
              "uuid": "08121df6-4a32-4a3b-a30b-21af8329a513",
              "parentUUID": "e7fb3e2d-6844-42af-a4c3-b5e61e743828",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "08121df6-4a32-4a3b-a30b-21af8329a513"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 497,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d2e24c41-1600-4428-8a81-3957c01e639f",
          "title": "Validation JSON Schema",
          "fullFile": "C:\\Users\\ilham\\OneDrive\\Desktop\\API Automation\\test\\booking\\getBooking.js",
          "file": "\\test\\booking\\getBooking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "JSON Schema",
              "fullTitle": "Validation JSON Schema JSON Schema",
              "timedOut": false,
              "duration": 105,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst response = await fetch('https://reqres.in/api/users/2');\nconst data = await response.json();\nconst validate = ajv.compile(schema);\nconst valid = validate(data);\nif (!valid) {\n    console.log(validate.errors);\n}\nconsole.log(\"test: \" + JSON.stringify(data, null, 1));\nassert.ok(valid, \"Response JSON harus sesuai dengan schema\");",
              "err": {},
              "uuid": "81e76e78-5d0f-427b-a4c9-056b5687bc36",
              "parentUUID": "d2e24c41-1600-4428-8a81-3957c01e639f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "81e76e78-5d0f-427b-a4c9-056b5687bc36"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 105,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a8780471-fb73-4363-979c-9c6b802e7dd2",
          "title": "Network Response Status",
          "fullFile": "C:\\Users\\ilham\\OneDrive\\Desktop\\API Automation\\test\\booking\\getBooking.js",
          "file": "\\test\\booking\\getBooking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return status 200",
              "fullTitle": "Network Response Status should return status 200",
              "timedOut": false,
              "duration": 64,
              "state": "passed",
              "speed": "medium",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst response = await fetch('https://reqres.in/api/users/2');\n// Assert that the response status is 200\nassert.strictEqual(response.status, 200, \"Response status harus 200\");",
              "err": {},
              "uuid": "a67fd077-c8b9-4489-8452-4b71f0dc308b",
              "parentUUID": "a8780471-fb73-4363-979c-9c6b802e7dd2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "a67fd077-c8b9-4489-8452-4b71f0dc308b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 64,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "d129f476-0015-43e9-adc8-852d0d1812c1",
          "title": "Validation JSON Schema",
          "fullFile": "C:\\Users\\ilham\\OneDrive\\Desktop\\API Automation\\test\\booking\\patchBooking.js",
          "file": "\\test\\booking\\patchBooking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "PATCH JSON Schema",
              "fullTitle": "Validation JSON Schema PATCH JSON Schema",
              "timedOut": false,
              "duration": 528,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst response = await fetch('https://reqres.in/api/users/2', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        name: \"morpheus\",\n        job: \"zion resident\"\n    })\n});\nconst data = await response.json();\nconst validate = ajv.compile(patchSchema);\nconst valid = validate(data);\nif (!valid) {\n    console.log(validate.errors);\n}\nconsole.log(\"test: \" + JSON.stringify(data, null, 1));\nassert.ok(valid, \"Response JSON harus sesuai dengan schema\");",
              "err": {},
              "uuid": "25de9c7a-c91f-47cd-815d-7fa2bb51ff58",
              "parentUUID": "d129f476-0015-43e9-adc8-852d0d1812c1",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "25de9c7a-c91f-47cd-815d-7fa2bb51ff58"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 528,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "1b2d6f05-0c40-4e33-a060-8d6ca771e0be",
          "title": "Network Response Status",
          "fullFile": "C:\\Users\\ilham\\OneDrive\\Desktop\\API Automation\\test\\booking\\patchBooking.js",
          "file": "\\test\\booking\\patchBooking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "PATCH should return status 200",
              "fullTitle": "Network Response Status PATCH should return status 200",
              "timedOut": false,
              "duration": 511,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst response = await fetch('https://reqres.in/api/users/2', {\n    method: 'PATCH',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        name: \"morpheus\",\n        job: \"zion resident\"\n    })\n});\n// Assert that the response status is 200\nassert.strictEqual(response.status, 200, \"Response status harus 200\");",
              "err": {},
              "uuid": "2fb389f2-1b11-4167-9d4b-5dc253eb4305",
              "parentUUID": "1b2d6f05-0c40-4e33-a060-8d6ca771e0be",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "2fb389f2-1b11-4167-9d4b-5dc253eb4305"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 511,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "6ecf7767-6946-4978-ae70-c17c257a8a94",
          "title": "Validation JSON Schema",
          "fullFile": "C:\\Users\\ilham\\OneDrive\\Desktop\\API Automation\\test\\booking\\postBooking.js",
          "file": "\\test\\booking\\postBooking.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "JSON Schema",
              "fullTitle": "Validation JSON Schema JSON Schema",
              "timedOut": false,
              "duration": 555,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "this.timeout(5000);\nconst response = await fetch('https://reqres.in/api/users', {\n    method: 'POST',\n    headers: {\n        'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n        name: \"morpheus\",\n        job: \"leader\"\n    })\n});\nconst data = await response.json();\nconst validate = ajv.compile(schema);\nconst valid = validate(data);\nif (!valid) {\n    console.log(validate.errors);\n}\nconsole.log(\"test: \" + JSON.stringify(data, null, 1));\nassert.ok(valid, \"Response JSON harus sesuai dengan schema\");",
              "err": {},
              "uuid": "e3c43fe8-089f-4e5a-a73a-776f00bdef97",
              "parentUUID": "6ecf7767-6946-4978-ae70-c17c257a8a94",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "e3c43fe8-089f-4e5a-a73a-776f00bdef97"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 555,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.1.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome.html",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "./mochawesome-report",
        "reportFilename": "mochawesome.html"
      },
      "version": "6.2.0"
    }
  }
}